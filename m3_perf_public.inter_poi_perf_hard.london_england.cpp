#include <random>
#include <unittest++/UnitTest++.h>

#include "StreetsDatabaseAPI.h"
#include "m1.h"
#include "m3.h"

#include "unit_test_util.h"
#include "path_verify.h"

using ece297test::relative_error;
using ece297test::path_is_legal;


SUITE(inter_inter_path_perf_hard_public) {
struct MapFixture {
    MapFixture() {
        rng = std::minstd_rand(4);
        rand_intersection = std::uniform_int_distribution<unsigned>(0, getNumberOfIntersections()-1);
        rand_street = std::uniform_int_distribution<unsigned>(1, getNumberOfStreets()-1);
        rand_segment = std::uniform_int_distribution<unsigned>(0, getNumberOfStreetSegments()-1);
        rand_poi = std::uniform_int_distribution<unsigned>(0, getNumberOfPointsOfInterest()-1);
        rand_lat = std::uniform_real_distribution<double>(50.941036224, 51.983997345);
        rand_lon = std::uniform_real_distribution<double>(-1.114988804, 0.894998193);
        rand_turn_penalty = std::uniform_real_distribution<double>(0., 30.);
    }

    std::minstd_rand rng;
    std::uniform_int_distribution<unsigned> rand_intersection;
    std::uniform_int_distribution<unsigned> rand_street;
    std::uniform_int_distribution<unsigned> rand_segment;
    std::uniform_int_distribution<unsigned> rand_poi;
    std::uniform_real_distribution<double> rand_lat;
    std::uniform_real_distribution<double> rand_lon;
    std::uniform_real_distribution<double> rand_turn_penalty;
};
    TEST_FIXTURE(MapFixture, find_path_to_point_of_interest_perf_hard) {
        //Verify Functionality
        std::vector<unsigned> path;
        std::vector<unsigned> valid_end_intersections;
        double path_cost;
        
        valid_end_intersections = {344864, 228076, 3455, 118337, 260035, 18646, 346404, 60944, 74077, 370729, 316479};
        path = find_path_to_point_of_interest(54523, "The King's Head", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(54523, valid_end_intersections, path));
        CHECK(path_cost <= 997.01267168051253975);
        
        valid_end_intersections = {16960};
        path = find_path_to_point_of_interest(105358, "Tandoori", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(105358, valid_end_intersections, path));
        CHECK(path_cost <= 3285.92575749577326860);
        
        valid_end_intersections = {125493, 291134, 264497, 33750, 33271, 3572, 290037, 366891, 33086, 370889, 278722, 45725, 33793, 10161, 34240, 227719, 384187, 109357, 158621, 25714, 33959, 34940, 33671, 60746, 316361, 340078, 123009, 34318, 2738, 309102, 83601, 30829, 257162, 125491, 285916, 381327, 381331, 20247, 198323, 95363, 20244, 290193, 383640, 381326, 381315, 310804, 383627, 383634, 383641, 383680, 383630, 322836, 173418, 196656, 69391, 69422, 191806, 69396, 69436, 192697, 191793, 154921, 121623, 121622, 121621, 272048, 122952, 88732, 119791, 88732, 79002, 272053, 154912, 79000, 371119, 79004, 78985, 78984, 196658, 88729, 300634, 338173, 154894, 154894, 36535, 372288, 378783, 383662, 383646, 383646, 372287, 317146, 383658, 120735, 36526, 299943, 36523, 264009, 264007, 383347, 23796, 383349, 20260, 53457, 309173, 270279, 104713, 241484, 300497, 106837, 6206, 107146, 125760, 293349, 31371, 325544, 67225, 385235, 36317, 38495, 106864, 125523, 122183, 122181, 309084, 309084, 281386, 335505, 76506, 76458, 60761, 72375, 254089, 120727, 280410, 72374, 192702, 72370, 72287, 274771, 279892, 72274, 184232, 227177, 231630, 184228, 192601, 10393, 352664, 280285, 231621, 279898, 76590, 291368, 76585, 192832, 62895, 120207, 62895, 289755, 52781, 120314, 52784, 62870, 231635, 192635, 88686, 88698, 88696, 88696, 259698, 69388, 69389, 405911, 152345, 152345, 69412, 69400, 152343, 69416, 69438, 191786, 121629, 191789, 69432, 313540, 88675, 88674, 37366, 124268, 124268, 311199, 37367, 323212, 88673, 401533, 88679, 137510, 123602, 121205, 119599, 123598, 124244, 152329, 150496, 191714, 191717, 191715, 90163, 122921, 309847, 123588, 122606, 122603, 19918, 123584, 33952, 33951, 119956, 110139, 125515, 98338, 104797, 104659, 104668, 347058, 105207, 106877, 105429, 24862, 141956, 286218, 34274, 33082, 106713, 64449, 64445, 35231, 35216, 18266, 18268, 35226, 33582, 33759, 364527, 364543, 33869, 17574, 64228, 35273, 33902, 33882, 33881, 33882, 314538, 264765, 109354, 109354, 278721, 36307, 33521, 33901, 33901, 33902, 33901, 32997, 32993, 33336, 33511, 158680, 382880, 16327, 20349, 16329, 16332, 123747, 123746, 327762, 92119, 30659, 30648, 18290, 34548, 293539, 290188, 290189, 5232, 296986, 140608, 296980, 218724, 6176, 121756, 163107, 320385, 3458, 111578, 226976, 148795, 247124, 247256, 273395, 163961, 415115, 124211, 183513, 44866, 39961, 34037, 252004, 34083, 368294, 370318, 370312, 25656, 370312, 274678, 314313, 34509, 321224, 33857, 2727, 40293, 383093, 38195, 260700, 274334, 34773, 34780, 34897, 34894, 34898, 34892, 34612, 19819, 34771, 3747, 34759, 34757, 34753, 34754, 33974, 33983, 397131, 33980, 353075, 34029, 34039, 34028, 34039, 48436, 25699, 246982, 264563, 25647, 34596, 239271, 296428, 34594, 33482, 33482, 214575, 296426, 294480, 214572, 335283, 34522, 34522, 34502, 294480, 34526, 34530, 34529, 45712, 16618, 33516, 16606, 33530, 33948, 12167, 52614, 52614, 16729, 16723, 381993, 272946, 43829, 382802, 348514, 5841, 4454, 4670, 5841, 348518, 123051, 110808, 67139, 121139, 153670, 9621, 5928, 120976, 9540, 9618, 9606, 296422, 5913, 9624, 10194, 10163, 296435, 10195, 33799, 34316, 34315, 34311, 33798, 33792, 34346, 200788, 12180, 12179, 34347, 331341, 109332, 5356, 4673, 4673, 185161, 9608, 9607, 33640, 33599, 33598, 34940, 5989, 4676, 224585, 120496, 53462, 53455, 124761, 127778, 35277, 247987, 247984, 124768, 410927, 226759, 374926, 82460, 125886, 52682, 55223, 124842, 52692, 55221, 55224, 55219, 34103, 33708, 226496, 75443, 33701, 226493, 33705, 272102, 281920, 226515, 427233, 33668, 366916, 33711, 33712, 427227, 33670, 283582, 225309, 369580, 283582, 159826, 370884, 370888, 318604, 370889, 370890, 250920, 369634, 324726, 250917, 369738, 159843, 159845, 369608, 369608, 3300, 2730, 273212, 158409, 370652, 370653, 415942, 34152, 245234, 34155, 369600, 369600, 34381, 318607, 370664, 360685, 360685, 2739, 360684, 2740, 382779, 382788, 382779, 161109, 158407, 312490, 60762, 120999, 124262, 124262, 121008, 34396, 33799};
        path = find_path_to_point_of_interest(108781, "Motorcycle parking", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(108781, valid_end_intersections, path));
        CHECK(path_cost <= 1156.91472258660314765);
        
        valid_end_intersections = {279658, 58569, 61996, 397671, 111676};
        path = find_path_to_point_of_interest(50588, "Tesco Express", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(50588, valid_end_intersections, path));
        CHECK(path_cost <= 2978.44555380130577760);
        
        valid_end_intersections = {92411, 182830, 321240, 44005, 302938, 301694, 56039, 217336, 300680, 1141, 254958, 242903, 157376, 11730, 157382, 178161, 407942, 296275, 273389, 129514, 223422, 22581, 22167, 415744, 386447, 23448, 279886, 154684, 357446, 11257, 89975, 296137, 279361, 26928, 120314, 76471, 33605, 34729, 274771, 235299, 202486, 425721, 293536, 340258, 393320, 3474, 265387, 188664, 409341, 298781, 419062, 431031, 305770, 124320, 29951, 239270, 313491, 356154, 314527, 35367, 158026, 35233, 301809, 8132, 30747, 102687, 146820, 381757, 89405, 230677, 329944, 60445, 91165, 33486, 22473, 117546, 358470, 120999, 350523, 35375, 340865, 39449, 395044, 314343, 34024, 393794, 393321, 418122, 354373, 328598, 41143, 84676, 34977, 48324, 386926, 126242, 117079, 430236, 24571, 412917, 18270, 347780, 417460, 61965, 23072, 411462, 404814, 35274, 29184, 158455, 296432, 78371, 198769, 183309, 394468, 20027, 195484, 142896, 9855, 224517, 9857, 139583, 8134, 435232, 291155, 412064, 214566, 82969, 292373, 146425, 95101, 33228, 33430, 34827, 357936, 201410, 20350, 31080, 349602, 55955, 327823, 89466, 278803};
        path = find_path_to_point_of_interest(120844, "Starbucks", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(120844, valid_end_intersections, path));
        CHECK(path_cost <= 301.42809801411596027);
        
        valid_end_intersections = {125493, 291134, 264497, 33750, 33271, 3572, 290037, 366891, 33086, 370889, 278722, 45725, 33793, 10161, 34240, 227719, 384187, 109357, 158621, 25714, 33959, 34940, 33671, 60746, 316361, 340078, 123009, 34318, 2738, 309102, 83601, 30829, 257162, 125491, 285916, 381327, 381331, 20247, 198323, 95363, 20244, 290193, 383640, 381326, 381315, 310804, 383627, 383634, 383641, 383680, 383630, 322836, 173418, 196656, 69391, 69422, 191806, 69396, 69436, 192697, 191793, 154921, 121623, 121622, 121621, 272048, 122952, 88732, 119791, 88732, 79002, 272053, 154912, 79000, 371119, 79004, 78985, 78984, 196658, 88729, 300634, 338173, 154894, 154894, 36535, 372288, 378783, 383662, 383646, 383646, 372287, 317146, 383658, 120735, 36526, 299943, 36523, 264009, 264007, 383347, 23796, 383349, 20260, 53457, 309173, 270279, 104713, 241484, 300497, 106837, 6206, 107146, 125760, 293349, 31371, 325544, 67225, 385235, 36317, 38495, 106864, 125523, 122183, 122181, 309084, 309084, 281386, 335505, 76506, 76458, 60761, 72375, 254089, 120727, 280410, 72374, 192702, 72370, 72287, 274771, 279892, 72274, 184232, 227177, 231630, 184228, 192601, 10393, 352664, 280285, 231621, 279898, 76590, 291368, 76585, 192832, 62895, 120207, 62895, 289755, 52781, 120314, 52784, 62870, 231635, 192635, 88686, 88698, 88696, 88696, 259698, 69388, 69389, 405911, 152345, 152345, 69412, 69400, 152343, 69416, 69438, 191786, 121629, 191789, 69432, 313540, 88675, 88674, 37366, 124268, 124268, 311199, 37367, 323212, 88673, 401533, 88679, 137510, 123602, 121205, 119599, 123598, 124244, 152329, 150496, 191714, 191717, 191715, 90163, 122921, 309847, 123588, 122606, 122603, 19918, 123584, 33952, 33951, 119956, 110139, 125515, 98338, 104797, 104659, 104668, 347058, 105207, 106877, 105429, 24862, 141956, 286218, 34274, 33082, 106713, 64449, 64445, 35231, 35216, 18266, 18268, 35226, 33582, 33759, 364527, 364543, 33869, 17574, 64228, 35273, 33902, 33882, 33881, 33882, 314538, 264765, 109354, 109354, 278721, 36307, 33521, 33901, 33901, 33902, 33901, 32997, 32993, 33336, 33511, 158680, 382880, 16327, 20349, 16329, 16332, 123747, 123746, 327762, 92119, 30659, 30648, 18290, 34548, 293539, 290188, 290189, 5232, 296986, 140608, 296980, 218724, 6176, 121756, 163107, 320385, 3458, 111578, 226976, 148795, 247124, 247256, 273395, 163961, 415115, 124211, 183513, 44866, 39961, 34037, 252004, 34083, 368294, 370318, 370312, 25656, 370312, 274678, 314313, 34509, 321224, 33857, 2727, 40293, 383093, 38195, 260700, 274334, 34773, 34780, 34897, 34894, 34898, 34892, 34612, 19819, 34771, 3747, 34759, 34757, 34753, 34754, 33974, 33983, 397131, 33980, 353075, 34029, 34039, 34028, 34039, 48436, 25699, 246982, 264563, 25647, 34596, 239271, 296428, 34594, 33482, 33482, 214575, 296426, 294480, 214572, 335283, 34522, 34522, 34502, 294480, 34526, 34530, 34529, 45712, 16618, 33516, 16606, 33530, 33948, 12167, 52614, 52614, 16729, 16723, 381993, 272946, 43829, 382802, 348514, 5841, 4454, 4670, 5841, 348518, 123051, 110808, 67139, 121139, 153670, 9621, 5928, 120976, 9540, 9618, 9606, 296422, 5913, 9624, 10194, 10163, 296435, 10195, 33799, 34316, 34315, 34311, 33798, 33792, 34346, 200788, 12180, 12179, 34347, 331341, 109332, 5356, 4673, 4673, 185161, 9608, 9607, 33640, 33599, 33598, 34940, 5989, 4676, 224585, 120496, 53462, 53455, 124761, 127778, 35277, 247987, 247984, 124768, 410927, 226759, 374926, 82460, 125886, 52682, 55223, 124842, 52692, 55221, 55224, 55219, 34103, 33708, 226496, 75443, 33701, 226493, 33705, 272102, 281920, 226515, 427233, 33668, 366916, 33711, 33712, 427227, 33670, 283582, 225309, 369580, 283582, 159826, 370884, 370888, 318604, 370889, 370890, 250920, 369634, 324726, 250917, 369738, 159843, 159845, 369608, 369608, 3300, 2730, 273212, 158409, 370652, 370653, 415942, 34152, 245234, 34155, 369600, 369600, 34381, 318607, 370664, 360685, 360685, 2739, 360684, 2740, 382779, 382788, 382779, 161109, 158407, 312490, 60762, 120999, 124262, 124262, 121008, 34396, 33799};
        path = find_path_to_point_of_interest(147568, "Motorcycle parking", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(147568, valid_end_intersections, path));
        CHECK(path_cost <= 3471.41846673280724644);
        
        valid_end_intersections = {33523, 18271, 34775, 214574, 364529, 369624, 409926};
        path = find_path_to_point_of_interest(147984, "Abokado", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(147984, valid_end_intersections, path));
        CHECK(path_cost <= 1495.19546960064462837);
        
        valid_end_intersections = {279553, 1958, 60950, 62967, 288656, 84008, 56650, 400121, 207967, 123832, 193041, 9552, 2914, 207350, 68995, 376615, 219227, 336492, 47383, 193314, 227314, 259097, 84313, 186505, 418436, 179, 25453, 27041, 42518, 272141, 4690, 120889, 222267, 319080, 202160, 212913, 332929, 39681, 288397, 368030, 314364, 195372, 370947};
        path = find_path_to_point_of_interest(161460, "The White Hart", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(161460, valid_end_intersections, path));
        CHECK(path_cost <= 897.26754753434363465);
        
        valid_end_intersections = {376755, 301694, 29377, 35367, 201630, 417812, 9162, 409384};
        path = find_path_to_point_of_interest(164496, "Giraffe", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(164496, valid_end_intersections, path));
        CHECK(path_cost <= 799.99940054687613156);
        
        valid_end_intersections = {261847};
        path = find_path_to_point_of_interest(192596, "St Augustines Anglican Church", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(192596, valid_end_intersections, path));
        CHECK(path_cost <= 2840.26501528330481960);
        
        valid_end_intersections = {34272, 240575, 95101};
        path = find_path_to_point_of_interest(203467, "La Dolce Vita", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(203467, valid_end_intersections, path));
        CHECK(path_cost <= 1465.16782026461464739);
        
        valid_end_intersections = {153253, 81574, 276169, 297747, 275373};
        path = find_path_to_point_of_interest(205793, "Delmergate Pharmacy", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(205793, valid_end_intersections, path));
        CHECK(path_cost <= 4645.39793292216654663);
        
        valid_end_intersections = {20228};
        path = find_path_to_point_of_interest(212029, "Byron Proper Hamburgers", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(212029, valid_end_intersections, path));
        CHECK(path_cost <= 520.19456956873159470);
        
        valid_end_intersections = {257782};
        path = find_path_to_point_of_interest(240193, "Dene Dental Practice", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(240193, valid_end_intersections, path));
        CHECK(path_cost <= 2920.43155841032148601);
        
        valid_end_intersections = {3880};
        path = find_path_to_point_of_interest(260878, "City Fried Chicken", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(260878, valid_end_intersections, path));
        CHECK(path_cost <= 3154.31216445939708137);
        
        valid_end_intersections = {367207};
        path = find_path_to_point_of_interest(290753, "Square and Compasses", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(290753, valid_end_intersections, path));
        CHECK(path_cost <= 4519.29965852329678455);
        
        valid_end_intersections = {323414};
        path = find_path_to_point_of_interest(295638, "Cooper & Wolf", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(295638, valid_end_intersections, path));
        CHECK(path_cost <= 3082.10496877302375651);
        
        valid_end_intersections = {64975};
        path = find_path_to_point_of_interest(298744, "Bugle Horn", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(298744, valid_end_intersections, path));
        CHECK(path_cost <= 3004.51020507712701146);
        
        valid_end_intersections = {120206, 5936, 58523, 357022, 428730, 348489, 187137, 4610, 34292, 108436, 5774, 373578, 29095, 91064, 73025, 24530, 348265, 114466, 218802, 18360, 106691, 77212, 47531, 34187, 207827, 33692, 173982, 323336, 229310, 275747, 149838, 143199, 401515, 316105, 75110, 192713, 5946, 242903, 57455, 22165, 103264, 158457, 143537, 34580, 362047, 26734, 190563, 74338, 24355, 87928, 223422, 377771, 27805, 296774, 262959, 220495, 64879, 213960, 252420, 423510, 23448, 379140, 382944, 289534, 270294, 413218, 186380, 426165, 426123, 34564, 170580, 268343, 177619, 157612, 35419, 273233, 185249, 190846, 334774, 124666, 2694, 104557, 181988, 283567, 257086, 337164, 77751, 341311, 206673, 39683, 314833, 407649, 24653, 152337, 168413, 47085, 155408, 241542, 48225, 33484, 317125, 341902, 5, 192522, 54413, 201868, 199422, 21807, 108666, 271441, 180031, 1918, 260789, 193336, 172322, 166353, 36815, 93614, 337177, 167571, 95012, 364442, 250926, 382976, 231692, 162273, 125786, 328338, 146321, 298184, 93473, 287212, 48626, 411326, 411326, 291141, 335642, 37810, 47837, 393794, 313987, 70817, 231123, 145577, 9863, 386925, 251399, 171461, 162005, 189866, 89791, 77049, 54844, 290218, 199449, 363117, 25218, 258313, 27734, 340549, 85182, 103001, 194848, 411701, 417812, 221579, 39465, 7337, 27738, 91014, 213058, 37810, 225933, 4024, 119594, 118336, 1958, 387484, 209810, 13868, 13868, 53748, 377992, 405770, 250422, 21753, 349421, 317404, 119615};
        path = find_path_to_point_of_interest(300654, "Barclays", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(300654, valid_end_intersections, path));
        CHECK(path_cost <= 371.10213635749232708);
        
        valid_end_intersections = {15774};
        path = find_path_to_point_of_interest(311174, "Kebab King", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(311174, valid_end_intersections, path));
        CHECK(path_cost <= 2853.02302794678553255);
        
        valid_end_intersections = {15493};
        path = find_path_to_point_of_interest(314809, "The Platform", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(314809, valid_end_intersections, path));
        CHECK(path_cost <= 4539.66164477461916249);
        
        valid_end_intersections = {15751};
        path = find_path_to_point_of_interest(316804, "Slugwash Lane", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(316804, valid_end_intersections, path));
        CHECK(path_cost <= 4299.12274069685281574);
        
        valid_end_intersections = {394468};
        path = find_path_to_point_of_interest(385344, "Jimmy's World Kitchen", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(385344, valid_end_intersections, path));
        CHECK(path_cost <= 2393.89838545283555504);
        
        valid_end_intersections = {83673, 364897, 350568, 80931, 113480, 185341, 96287, 201946, 229310, 232145, 82883, 344028, 63901, 256317, 251064, 267607, 46518, 66604, 166725, 186318, 131297, 150176, 168765, 173726, 188607, 71628, 70831, 226288, 230148, 279863, 262315};
        path = find_path_to_point_of_interest(400229, "The Chequers", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(400229, valid_end_intersections, path));
        CHECK(path_cost <= 1199.44558620633711143);
        
        valid_end_intersections = {33210, 34022, 128141, 272809, 34081, 395601, 337061, 425721, 92412, 35274, 18269, 407650, 49551, 1301, 33536, 153427, 435814, 125493, 211453, 418119, 1311};
        path = find_path_to_point_of_interest(408138, "EAT", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(408138, valid_end_intersections, path));
        CHECK(path_cost <= 4666.94963987085247936);
        
        valid_end_intersections = {382294};
        path = find_path_to_point_of_interest(394759, "Southern Joe", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(394759, valid_end_intersections, path));
        CHECK(path_cost <= 2455.61901252949837726);
        
        valid_end_intersections = {275539, 102117, 67861, 33848, 33218, 226156, 10166, 194531, 25455, 123237, 221580, 1812, 74400, 426687, 195293, 164, 118186, 295423, 331838, 82006, 212670, 296276, 11258, 204119, 208748, 426457, 20446, 231497, 294964, 409384, 8132, 33598, 78371};
        path = find_path_to_point_of_interest(377358, "Prezzo", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(377358, valid_end_intersections, path));
        CHECK(path_cost <= 137.20083432492165798);
        
        valid_end_intersections = {64468};
        path = find_path_to_point_of_interest(69595, "Snappy Snaps", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(69595, valid_end_intersections, path));
        CHECK(path_cost <= 2357.06292243699681421);
        
        valid_end_intersections = {294482, 72473, 232380, 47531, 183521, 248698, 290190, 3466, 64225, 64218, 34393, 256421, 136951, 3085, 158747, 51817, 26292, 289886, 5932, 98170, 98376, 34827, 34852, 411153, 35418, 290398, 160492, 54405, 410608, 120206, 287921, 8728, 252192, 15800, 166028, 25451, 86904, 403222, 154684, 299447, 24560, 123005, 291515, 298349, 329874, 302677, 65708, 305770, 34320, 29957, 296696, 33163, 28934, 38838, 36121, 84790, 49570, 351585, 99649, 300191, 31856, 185018, 94423, 109352, 33523, 254476, 40998, 249229, 126547, 52989, 233486, 354490, 96399, 79890, 296775, 214566, 327474, 133793, 139469, 432626, 253009, 392916, 406050, 20679, 182458, 7994, 91064, 328600, 145597, 25383, 145913, 302332, 393901, 272134, 273801, 6992, 273913, 417460, 318620, 285958, 138254, 418594, 341903, 134484, 7337, 158449, 61211, 34505, 48025, 119263, 341911, 244465, 134953, 430205, 397743, 394828, 376936, 73491, 52414, 422620, 154360, 270263, 26740, 270065, 379533, 103331, 218286, 191370, 224275, 420963, 426234, 360978, 17184, 52511, 381551, 283986, 285567, 204097, 245544, 58447, 131810};
        path = find_path_to_point_of_interest(238235, "Subway", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(238235, valid_end_intersections, path));
        CHECK(path_cost <= 607.10496835717742670);
        
        valid_end_intersections = {323336};
        path = find_path_to_point_of_interest(213806, "Queen's Gate (South)", 15.00000000000000000);
        path_cost = compute_path_travel_time(path, 15.00000000000000000);
        CHECK(path_is_legal(213806, valid_end_intersections, path));
        CHECK(path_cost <= 1255.02648127240354370);
        
        //Generate random inputs
        std::vector<unsigned> intersection_ids;
        std::vector<std::string> poi_names;
        std::vector<double> turn_penalties;
        for(size_t i = 0; i < 50; i++) {
            intersection_ids.push_back(rand_intersection(rng));
            poi_names.push_back(getPointOfInterestName(rand_poi(rng)));
            turn_penalties.push_back(rand_turn_penalty(rng));
        }
        {
            //Timed Test
            ECE297_TIME_CONSTRAINT(88430);
            std::vector<unsigned> result;
            for(size_t i = 0; i < 50; i++) {
                result = find_path_to_point_of_interest(intersection_ids[i], poi_names[i], turn_penalties[i]);
            }
        }
    } //find_path_to_point_of_interest_perf_hard

} //inter_inter_path_perf_hard_public

